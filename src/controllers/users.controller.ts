import typeorm from 'typeorm';
import { FastifyReply, FastifyRequest, RequestGenericInterface } from 'fastify';
import { v4 as uuidv4 } from 'uuid';
import IUser from '../postgresDB/interfaces/user.interface.js';
import User from '../postgresDB/entities/userEntity.js';
import Task from '../postgresDB/entities/taskEntity.js';

const { getConnection } = typeorm;
interface IreqUser extends RequestGenericInterface {
  Params: { id: string };
  Body: IUser;
}

/**
 * Sends all users and removes password from response
 * @param req - Incoming http request as Fastify request
 * @param rep - Outgoing http reply as Fastify reply
 */
const getUsers = async (req: FastifyRequest, rep: FastifyReply): Promise<void> => {
  try {
    const users = await getConnection('myConn')
      .getRepository(User)
      .createQueryBuilder('user')
      .select(['user.id', 'user.name', 'user.login'])
      .getMany();

    rep.send(users);
  } catch (error) {
    rep.code(500).send(error);
  }
};

/**
 * Sends the user by id provided in request params (ex. “/users/123”) and removes password from response
 * @param req - Incoming http request as Fastify request
 * @param rep - Outgoing http reply as Fastify reply
 */
const getUser = async (req: FastifyRequest<IreqUser>, rep: FastifyReply): Promise<void> => {
  // const users = getUsersDb();
  const { id } = req.params;
  try {
    const userToSend = await getConnection('myConn')
      .getRepository(User)
      .createQueryBuilder('user')
      .select(['user.id', 'user.name', 'user.login'])
      .where('user.id = :id', { id })
      .getOneOrFail();
    if (userToSend) {
      rep.send(userToSend);
    }
  } catch (error) {
    rep.code(404).send({ message: `User ${id} not found.` });
  }
};

/**
 * Creates new user with properties, provided in request body and id, randomly generated by uuid packet
 * @param req - Incoming http request as Fastify request
 * @param rep - Outgoing http reply as Fastify reply
 */
const addUser = async (req: FastifyRequest<IreqUser>, rep: FastifyReply): Promise<void> => {
  const userProps = req.body;

  const user = {
    id: uuidv4(),
    ...userProps,
  };

  await getConnection('myConn').createQueryBuilder().insert().into(User).values(user).execute();
  const { password, ...userButPassword } = user;

  rep.code(201).send(userButPassword);
};

/**
 * Replaces user with id, provided in request parameters with user, provided in request body.
 * @param req - Incoming http request as Fastify request
 * @param rep - Outgoing http reply as Fastify reply
 */
const updateUser = async (req: FastifyRequest<IreqUser>, rep: FastifyReply): Promise<void> => {
  const userProps = req.body;
  const { id } = req.params;

  try {
    const user = await getConnection('myConn')
      .getRepository(User)
      .createQueryBuilder('user')
      .where('user.id = :id', { id })
      .getOneOrFail();

    if (user) {
      await getConnection('myConn')
        .createQueryBuilder()
        .update(User)
        .set({ id, ...userProps })
        .where('id = :id', { id })
        .execute();
      rep.code(200).send({ ...userProps });
    }
  } catch (error) {
    rep.code(404).send({ message: `User ${id} not found.` });
  }
};

/**
 * Removes user with id, provided in request parameters from user list.
 * In all tasks, where user is assignee, sets userId to 'null'
 * @param req - Incoming http request as Fastify request
 * @param rep - Outgoing http reply as Fastify reply
 */
const deleteUser = async (req: FastifyRequest<IreqUser>, rep: FastifyReply): Promise<void> => {
  const { id } = req.params;

  try {
    const user = await getConnection('myConn')
      .getRepository(User)
      .createQueryBuilder('user')
      .where('user.id = :id', { id })
      .getOneOrFail();

    await getConnection('myConn').createQueryBuilder().delete().from(User).where('id = :id', { id }).execute();

    await getConnection('myConn')
      .createQueryBuilder()
      .update(Task)
      .set({ userId: null })
      .where('userId = :id', { id })
      .execute();

    rep.code(204);
  } catch (error) {
    rep.code(404).send({ message: `User ${id} not found.` });
  }
};

export { getUsers, getUser, addUser, updateUser, deleteUser };
